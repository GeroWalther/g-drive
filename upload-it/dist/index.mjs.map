{"version":3,"sources":["../src/providers/s3-provider.ts","../src/providers/base-provider.ts","../src/providers/filesystem-provider.ts","../src/providers/provider-factory.ts","../src/core/uploader.ts","../src/hooks/useUploader.ts","../src/components/UploadButton.tsx","../src/components/UploadDialog.tsx","../src/index.ts"],"names":["React","useState"],"mappings":"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","sourcesContent":["import {\n  S3Client,\n  PutObjectCommand,\n  GetObjectCommand,\n  DeleteObjectCommand,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { BaseStorageProvider } from \"./base-provider\";\nimport {\n  FileInfo,\n  CompletedFileInfo,\n  UploadUrlResponse,\n  FileMetadata,\n  S3Config,\n} from \"../core/types\";\n\n/**\n * S3 storage provider implementation\n * Handles direct uploads to Amazon S3 using presigned URLs\n */\nexport class S3Provider extends BaseStorageProvider {\n  private s3Client: S3Client;\n  private config: S3Config;\n\n  constructor(config: S3Config) {\n    super();\n    this.config = config;\n\n    this.s3Client = new S3Client({\n      region: config.region,\n      endpoint: config.endpoint,\n      credentials: config.credentials\n        ? {\n            accessKeyId: config.credentials.accessKeyId,\n            secretAccessKey: config.credentials.secretAccessKey,\n          }\n        : undefined,\n      forcePathStyle: config.forcePathStyle ?? true,\n    });\n  }\n\n  /**\n   * Generate a presigned URL for direct uploads to S3\n   */\n  async getUploadUrl(fileInfo: FileInfo): Promise<UploadUrlResponse> {\n    // Create a unique key for the file\n    const fileKey = this.generateFileKey(fileInfo);\n\n    // Include optional upload folder if configured\n    const fullKey = this.config.uploadFolder\n      ? `${this.config.uploadFolder}/${fileKey}`\n      : fileKey;\n\n    // Create the command to put an object\n    const command = new PutObjectCommand({\n      Bucket: this.config.bucket,\n      Key: fullKey,\n      ContentType: fileInfo.type,\n    });\n\n    // Generate presigned URL (default expiry: 1 hour)\n    const uploadUrl = await getSignedUrl(this.s3Client, command, {\n      expiresIn: 3600,\n    });\n\n    return {\n      uploadUrl,\n      fileKey: fullKey,\n    };\n  }\n\n  /**\n   * Complete the upload process (for S3, the upload is already done via presigned URL)\n   * This is a hook to record metadata or perform post-processing\n   */\n  async completeUpload(fileInfo: CompletedFileInfo): Promise<FileMetadata> {\n    // Generate a URL for accessing the file\n    const url = await this.generateAccessUrl(fileInfo.fileKey);\n\n    // Return file metadata including the access URL\n    return {\n      name: fileInfo.name,\n      size: fileInfo.size,\n      type: fileInfo.type,\n      key: fileInfo.fileKey,\n      url: url,\n      lastModified: fileInfo.lastModified\n        ? new Date(fileInfo.lastModified)\n        : new Date(),\n    };\n  }\n\n  /**\n   * Generate a presigned URL for accessing a file\n   */\n  async generateAccessUrl(fileKey: string, expiresIn = 86400): Promise<string> {\n    const command = new GetObjectCommand({\n      Bucket: this.config.bucket,\n      Key: fileKey,\n    });\n\n    return getSignedUrl(this.s3Client, command, { expiresIn });\n  }\n\n  /**\n   * Delete a file from S3\n   */\n  async deleteFile(fileKey: string): Promise<boolean> {\n    try {\n      const command = new DeleteObjectCommand({\n        Bucket: this.config.bucket,\n        Key: fileKey,\n      });\n\n      await this.s3Client.send(command);\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting file from S3:\", error);\n      return false;\n    }\n  }\n}\n","import {\n  StorageProvider,\n  FileInfo,\n  CompletedFileInfo,\n  UploadUrlResponse,\n  FileMetadata,\n} from \"../core/types\";\n\n/**\n * Abstract base class for storage providers\n * Provides common functionality and ensures all providers implement required methods\n */\nexport abstract class BaseStorageProvider implements StorageProvider {\n  /**\n   * Generate a URL for uploading a file\n   */\n  abstract getUploadUrl(fileInfo: FileInfo): Promise<UploadUrlResponse>;\n\n  /**\n   * Complete the upload process\n   */\n  abstract completeUpload(fileInfo: CompletedFileInfo): Promise<FileMetadata>;\n\n  /**\n   * Generate a URL to access the file\n   */\n  abstract generateAccessUrl(\n    fileKey: string,\n    expiresIn?: number,\n  ): Promise<string>;\n\n  /**\n   * Delete a file\n   */\n  async deleteFile(fileKey: string): Promise<boolean> {\n    throw new Error(\"Delete method not implemented\");\n  }\n\n  /**\n   * List files\n   */\n  async listFiles(prefix?: string): Promise<FileMetadata[]> {\n    throw new Error(\"List method not implemented\");\n  }\n\n  /**\n   * Sanitize a filename\n   */\n  protected sanitizeFilename(filename: string): string {\n    return filename.replace(/[^a-zA-Z0-9.-]/g, \"_\");\n  }\n\n  /**\n   * Generate a unique file key\n   */\n  protected generateFileKey(fileInfo: FileInfo): string {\n    const timestamp = Date.now();\n    const sanitizedFilename = this.sanitizeFilename(fileInfo.name);\n    const folderPrefix = fileInfo.folder ? `${fileInfo.folder}/` : \"\";\n    return `${folderPrefix}${timestamp}-${sanitizedFilename}`;\n  }\n}\n","import { BaseStorageProvider } from \"./base-provider\";\nimport {\n  FileInfo,\n  CompletedFileInfo,\n  UploadUrlResponse,\n  FileMetadata,\n  FilesystemConfig,\n} from \"../core/types\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as crypto from \"crypto\";\n\n/**\n * Filesystem storage provider implementation\n * Handles uploads to the local filesystem\n */\nexport class FilesystemProvider extends BaseStorageProvider {\n  private config: FilesystemConfig;\n\n  constructor(config: FilesystemConfig) {\n    super();\n    this.config = config;\n\n    // Create upload directory if it doesn't exist and option is enabled\n    if (config.createDirIfNotExist !== false) {\n      this.ensureDirectoryExists(config.uploadDir);\n    }\n  }\n\n  /**\n   * Generate an endpoint for uploading a file\n   * For filesystem, this will typically be a server-side API endpoint\n   */\n  async getUploadUrl(fileInfo: FileInfo): Promise<UploadUrlResponse> {\n    // Create a unique key for the file\n    const fileKey = this.generateFileKey(fileInfo);\n\n    // In filesystem mode, we return a virtual URL that the frontend will POST to\n    // The actual handling happens on the server side\n\n    // This could be a server API endpoint, or just a virtual token\n    return {\n      uploadUrl: \"/api/upload\",\n      fileKey,\n      // Additional form fields can be included for validation\n      fields: {\n        key: fileKey,\n        \"content-type\": fileInfo.type,\n        \"x-upload-token\": this.generateUploadToken(fileKey),\n      },\n    };\n  }\n\n  /**\n   * Complete the upload process\n   * For filesystem, this is where the actual file saving happens\n   */\n  async completeUpload(fileInfo: CompletedFileInfo): Promise<FileMetadata> {\n    try {\n      // In a real implementation, the file would be moved from a temp location\n      // to its final destination. Here we're assuming the file has already\n      // been uploaded to a temporary location.\n\n      // The file path where it should be stored\n      const filePath = path.join(this.config.uploadDir, fileInfo.fileKey);\n\n      // Generate a public URL for accessing the file\n      const url = this.generatePublicUrl(fileInfo.fileKey);\n\n      return {\n        name: fileInfo.name,\n        size: fileInfo.size,\n        type: fileInfo.type,\n        key: fileInfo.fileKey,\n        url: url,\n        lastModified: fileInfo.lastModified\n          ? new Date(fileInfo.lastModified)\n          : new Date(),\n      };\n    } catch (error) {\n      console.error(\"Error completing filesystem upload:\", error);\n      throw new Error(\"Failed to complete upload\");\n    }\n  }\n\n  /**\n   * Generate a URL for accessing the file\n   */\n  async generateAccessUrl(fileKey: string): Promise<string> {\n    return this.generatePublicUrl(fileKey);\n  }\n\n  /**\n   * Delete a file from filesystem\n   */\n  async deleteFile(fileKey: string): Promise<boolean> {\n    try {\n      const filePath = path.join(this.config.uploadDir, fileKey);\n\n      // Check if file exists\n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error(\"Error deleting file from filesystem:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * List files from a directory\n   */\n  async listFiles(prefix?: string): Promise<FileMetadata[]> {\n    try {\n      const directory = prefix\n        ? path.join(this.config.uploadDir, prefix)\n        : this.config.uploadDir;\n\n      if (!fs.existsSync(directory)) {\n        return [];\n      }\n\n      const files = fs\n        .readdirSync(directory)\n        .filter((file) => fs.statSync(path.join(directory, file)).isFile())\n        .map((file) => {\n          const filePath = path.join(directory, file);\n          const stats = fs.statSync(filePath);\n          const relativePath = prefix ? `${prefix}/${file}` : file;\n\n          return {\n            name: file,\n            size: stats.size,\n            type: this.getMimeType(file),\n            key: relativePath,\n            url: this.generatePublicUrl(relativePath),\n            lastModified: stats.mtime,\n          };\n        });\n\n      return files;\n    } catch (error) {\n      console.error(\"Error listing files:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Generate a public URL for a file\n   */\n  private generatePublicUrl(fileKey: string): string {\n    // Replace backslashes with forward slashes for URLs\n    const normalizedKey = fileKey.replace(/\\\\/g, \"/\");\n\n    // Ensure the publicPath ends with a slash\n    const publicPath = this.config.publicPath.endsWith(\"/\")\n      ? this.config.publicPath\n      : `${this.config.publicPath}/`;\n\n    return `${publicPath}${normalizedKey}`;\n  }\n\n  /**\n   * Simple MIME type detection based on file extension\n   */\n  private getMimeType(filename: string): string {\n    const ext = path.extname(filename).toLowerCase();\n\n    const mimeTypes: Record<string, string> = {\n      \".jpg\": \"image/jpeg\",\n      \".jpeg\": \"image/jpeg\",\n      \".png\": \"image/png\",\n      \".gif\": \"image/gif\",\n      \".pdf\": \"application/pdf\",\n      \".doc\": \"application/msword\",\n      \".docx\":\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      \".xls\": \"application/vnd.ms-excel\",\n      \".xlsx\":\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      \".txt\": \"text/plain\",\n      \".csv\": \"text/csv\",\n    };\n\n    return mimeTypes[ext] || \"application/octet-stream\";\n  }\n\n  /**\n   * Ensure a directory exists, creating it if necessary\n   */\n  private ensureDirectoryExists(dir: string): void {\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n  }\n\n  /**\n   * Generate a token for validating uploads\n   */\n  private generateUploadToken(fileKey: string): string {\n    // In a real implementation, this would be a secure token\n    // that verifies the upload is authorized\n    return crypto\n      .createHash(\"sha256\")\n      .update(`${fileKey}-${Date.now()}`)\n      .digest(\"hex\");\n  }\n}\n","import { UploaderConfig, StorageProvider, ProviderType } from \"../core/types\";\nimport { S3Provider } from \"./s3-provider\";\nimport { FilesystemProvider } from \"./filesystem-provider\";\n\n/**\n * Factory function to create the appropriate provider based on configuration\n */\nexport function createProvider(config: UploaderConfig): StorageProvider {\n  const providerType = config.provider;\n\n  switch (providerType) {\n    case \"s3\":\n      if (!config.s3) {\n        throw new Error(\"S3 configuration is required when using S3 provider\");\n      }\n      return new S3Provider(config.s3);\n\n    case \"filesystem\":\n      if (!config.filesystem) {\n        throw new Error(\n          \"Filesystem configuration is required when using filesystem provider\",\n        );\n      }\n      return new FilesystemProvider(config.filesystem);\n\n    default:\n      throw new Error(`Unsupported provider type: ${providerType as string}`);\n  }\n}\n\n/**\n * Check if the configuration is valid for a specific provider\n */\nexport function validateConfig(config: UploaderConfig): boolean {\n  if (!config.provider) {\n    throw new Error(\"Provider type is required\");\n  }\n\n  switch (config.provider) {\n    case \"s3\":\n      if (!config.s3) return false;\n      if (!config.s3.region) return false;\n      if (!config.s3.bucket) return false;\n\n      // In server mode, credentials might be provided through environment variables\n      if (config.server?.mode !== \"server\" && !config.s3.credentials) {\n        return false;\n      }\n\n      return true;\n\n    case \"filesystem\":\n      if (!config.filesystem) return false;\n      if (!config.filesystem.uploadDir) return false;\n      if (!config.filesystem.publicPath) return false;\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// uploader.ts\n// Main Uploader class that orchestrates the file upload process\n// Handles file validation, upload progress tracking, and error handling\n// Coordinates with storage providers to handle the actual storage\n\nimport { createProvider, validateConfig } from \"../providers/provider-factory\";\nimport {\n  UploaderConfig,\n  FileInfo,\n  FileMetadata,\n  UploadProgress,\n  StorageProvider,\n} from \"./types\";\n\n/**\n * Main uploader class that orchestrates the file upload process.\n *\n * @class Uploader\n * @description The Uploader handles the complete file upload workflow including:\n * - File validation (size, type)\n * - Upload URL generation\n * - Direct uploads to storage providers\n * - Progress tracking\n * - Error handling\n *\n * @example\n * ```typescript\n * const uploader = new Uploader({\n *   provider: 's3',\n *   s3: {\n *     region: 'us-east-1',\n *     bucket: 'my-bucket',\n *     credentials: { ... }\n *   },\n *   onUploadProgress: (file, progress) => {\n *     console.log(`${file.name}: ${progress.percentage}%`);\n *   }\n * });\n *\n * const result = await uploader.uploadFile(file);\n * console.log('File uploaded:', result.url);\n * ```\n */\nexport class Uploader {\n  private provider: StorageProvider;\n  private config: UploaderConfig;\n\n  /**\n   * Creates a new Uploader instance.\n   *\n   * @param {UploaderConfig} config - The configuration object for the uploader\n   * @throws {Error} If the configuration is invalid\n   */\n  constructor(config: UploaderConfig) {\n    // Validate configuration\n    if (!validateConfig(config)) {\n      throw new Error(\"Invalid uploader configuration\");\n    }\n\n    this.config = config;\n    this.provider = createProvider(config);\n  }\n\n  /**\n   * Upload a single file to the configured storage provider.\n   *\n   * @param {File} file - The file to upload\n   * @param {string} [folder] - Optional folder path where the file should be stored\n   * @returns {Promise<FileMetadata>} Metadata about the uploaded file including the URL\n   * @throws {Error} If file validation fails or upload encounters an error\n   *\n   * @example\n   * ```typescript\n   * try {\n   *   const result = await uploader.uploadFile(file);\n   *   console.log('File URL:', result.url);\n   * } catch (error) {\n   *   console.error('Upload failed:', error);\n   * }\n   * ```\n   */\n  async uploadFile(file: File, folder?: string): Promise<FileMetadata> {\n    // Validate the file\n    this.validateFile(file);\n\n    // Notify start of upload\n    this.config.onUploadStart?.(file);\n\n    try {\n      // Get file info\n      const fileInfo: FileInfo = {\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        lastModified: file.lastModified,\n        folder,\n      };\n\n      // Get upload URL from provider\n      const { uploadUrl, fileKey, fields } =\n        await this.provider.getUploadUrl(fileInfo);\n\n      // Upload the file\n      let uploadedFile: Response;\n\n      if (fields) {\n        // If fields are provided, use multipart form upload\n        const formData = new FormData();\n\n        // Add all the fields to the form\n        Object.entries(fields).forEach(([key, value]) => {\n          formData.append(key, value);\n        });\n\n        // Add the file itself\n        formData.append(\"file\", file);\n\n        // Upload with progress tracking\n        uploadedFile = await this.uploadWithProgress(\n          uploadUrl,\n          {\n            method: \"POST\",\n            body: formData,\n          },\n          file,\n        );\n      } else {\n        // Direct upload (e.g., S3 presigned PUT URL)\n        uploadedFile = await this.uploadWithProgress(\n          uploadUrl,\n          {\n            method: \"PUT\",\n            body: file,\n            headers: {\n              \"Content-Type\": file.type,\n            },\n          },\n          file,\n        );\n      }\n\n      // Make sure the upload was successful\n      if (!uploadedFile.ok) {\n        const errorText = await uploadedFile.text();\n        throw new Error(`Upload failed: ${uploadedFile.status} - ${errorText}`);\n      }\n\n      // Complete the upload\n      const metadata = await this.provider.completeUpload({\n        ...fileInfo,\n        fileKey,\n      });\n\n      // Notify completion\n      this.config.onUploadComplete?.(file, metadata);\n\n      // Return the file metadata\n      return metadata;\n    } catch (error) {\n      // Notify error\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.config.onUploadError?.(file, err);\n      throw err;\n    }\n  }\n\n  /**\n   * Upload multiple files to the configured storage provider.\n   *\n   * @param {File[]} files - Array of files to upload\n   * @param {string} [folder] - Optional folder path where the files should be stored\n   * @returns {Promise<FileMetadata[]>} Array of metadata objects for the uploaded files\n   * @throws {Error} If file validation fails or upload encounters an error\n   *\n   * @example\n   * ```typescript\n   * const fileInput = document.querySelector('input[type=\"file\"]');\n   * if (fileInput.files.length > 0) {\n   *   const results = await uploader.uploadFiles(Array.from(fileInput.files));\n   *   console.log('Uploaded files:', results);\n   * }\n   * ```\n   */\n  async uploadFiles(files: File[], folder?: string): Promise<FileMetadata[]> {\n    const results: FileMetadata[] = [];\n\n    for (const file of files) {\n      const result = await this.uploadFile(file, folder);\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  /**\n   * Generate an access URL for a previously uploaded file.\n   * Useful for refreshing expired URLs.\n   *\n   * @param {string} fileKey - The file key returned from a previous upload\n   * @returns {Promise<string>} URL for accessing the file\n   * @throws {Error} If generating the URL fails\n   *\n   * @example\n   * ```typescript\n   * // Refresh a URL that might have expired\n   * const freshUrl = await uploader.getFileUrl('my-file-key');\n   * ```\n   */\n  async getFileUrl(fileKey: string): Promise<string> {\n    return this.provider.generateAccessUrl(fileKey);\n  }\n\n  /**\n   * Delete a previously uploaded file.\n   *\n   * @param {string} fileKey - The file key returned from a previous upload\n   * @returns {Promise<boolean>} True if deletion was successful\n   * @throws {Error} If the provider doesn't support deletion or the operation fails\n   *\n   * @example\n   * ```typescript\n   * const deleted = await uploader.deleteFile('my-file-key');\n   * if (deleted) {\n   *   console.log('File was successfully deleted');\n   * }\n   * ```\n   */\n  async deleteFile(fileKey: string): Promise<boolean> {\n    if (typeof this.provider.deleteFile !== \"function\") {\n      throw new Error(\"Delete operation not supported by this provider\");\n    }\n\n    return this.provider.deleteFile(fileKey);\n  }\n\n  /**\n   * Upload with progress tracking.\n   * Uses XMLHttpRequest for progress tracking if a progress callback is provided.\n   *\n   * @private\n   * @param {string} url - The URL to upload to\n   * @param {RequestInit} options - Fetch API options\n   * @param {File} file - The file being uploaded\n   * @returns {Promise<Response>} Fetch API Response object\n   */\n  private async uploadWithProgress(\n    url: string,\n    options: RequestInit,\n    file: File,\n  ): Promise<Response> {\n    return new Promise((resolve, reject) => {\n      // If no progress callback, just use regular fetch\n      if (!this.config.onUploadProgress) {\n        fetch(url, options).then(resolve).catch(reject);\n        return;\n      }\n\n      // Use XMLHttpRequest for progress tracking\n      const xhr = new XMLHttpRequest();\n\n      // Setup progress handler\n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          const progress: UploadProgress = {\n            loaded: event.loaded,\n            total: event.total,\n            percentage: Math.round((event.loaded / event.total) * 100),\n          };\n\n          this.config.onUploadProgress?.(file, progress);\n        }\n      };\n\n      // Setup completion handler\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          // Create a response object similar to fetch\n          const response = new Response(xhr.response, {\n            status: xhr.status,\n            statusText: xhr.statusText,\n            headers: this.parseHeaders(xhr.getAllResponseHeaders()),\n          });\n          resolve(response);\n        } else {\n          reject(new Error(`Upload failed with status ${xhr.status}`));\n        }\n      };\n\n      // Setup error handler\n      xhr.onerror = () => {\n        reject(new Error(\"Network error during upload\"));\n      };\n\n      // Open the request\n      xhr.open(options.method || \"GET\", url);\n\n      // Set headers\n      if (options.headers) {\n        Object.entries(options.headers as Record<string, string>).forEach(\n          ([key, value]) => {\n            xhr.setRequestHeader(key, value);\n          },\n        );\n      }\n\n      // Send the request\n      xhr.send(options.body as XMLHttpRequestBodyInit);\n    });\n  }\n\n  /**\n   * Parse headers from XMLHttpRequest response.\n   *\n   * @private\n   * @param {string} headerStr - Raw header string from XMLHttpRequest\n   * @returns {Headers} Fetch API Headers object\n   */\n  private parseHeaders(headerStr: string): Headers {\n    const headers = new Headers();\n    const headerPairs = headerStr.trim().split(\"\\r\\n\");\n\n    headerPairs.forEach((headerPair) => {\n      const index = headerPair.indexOf(\": \");\n      if (index > 0) {\n        const key = headerPair.substring(0, index);\n        const val = headerPair.substring(index + 2);\n        headers.append(key, val);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Validate a file before upload.\n   * Checks size and file type restrictions.\n   *\n   * @private\n   * @param {File} file - The file to validate\n   * @throws {Error} If validation fails\n   */\n  private validateFile(file: File): void {\n    // Check file size\n    if (this.config.maxFileSize && file.size > this.config.maxFileSize) {\n      throw new Error(\n        `File size exceeds maximum allowed size (${this.formatFileSize(this.config.maxFileSize)})`,\n      );\n    }\n\n    // Check file type if restrictions are set\n    if (\n      this.config.allowedFileTypes &&\n      this.config.allowedFileTypes.length > 0\n    ) {\n      const isAllowed = this.isFileTypeAllowed(\n        file,\n        this.config.allowedFileTypes,\n      );\n      if (!isAllowed) {\n        throw new Error(`File type not allowed: ${file.type}`);\n      }\n    }\n  }\n\n  /**\n   * Check if a file type is allowed based on configuration.\n   *\n   * @private\n   * @param {File} file - The file to check\n   * @param {string[]} allowedTypes - Array of allowed MIME types or extensions\n   * @returns {boolean} True if the file type is allowed\n   */\n  private isFileTypeAllowed(file: File, allowedTypes: string[]): boolean {\n    return allowedTypes.some((type) => {\n      // Handle wildcards like \"image/*\"\n      if (type.endsWith(\"/*\")) {\n        const category = type.split(\"/\")[0];\n        return file.type.startsWith(`${category}/`);\n      }\n\n      // Handle specific MIME types\n      if (type.includes(\"/\")) {\n        return file.type === type;\n      }\n\n      // Handle file extensions\n      if (type.startsWith(\".\")) {\n        return file.name.toLowerCase().endsWith(type.toLowerCase());\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * Format file size for human-readable display.\n   *\n   * @private\n   * @param {number} bytes - File size in bytes\n   * @returns {string} Formatted file size (e.g., \"1.5 MB\")\n   */\n  private formatFileSize(bytes: number): string {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024)\n      return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  }\n}\n","import { useState, useCallback, useEffect, useRef } from \"react\";\nimport { Uploader } from \"../core/uploader\";\nimport { UploaderConfig, FileMetadata, UploadProgress } from \"../core/types\";\n\ninterface UseUploaderState {\n  isUploading: boolean;\n  progress: Record<string, UploadProgress>;\n  results: Record<string, FileMetadata>;\n  errors: Record<string, Error>;\n}\n\ninterface UseUploaderOptions\n  extends Omit<\n    UploaderConfig,\n    \"onUploadStart\" | \"onUploadProgress\" | \"onUploadComplete\" | \"onUploadError\"\n  > {\n  onSuccess?: (files: FileMetadata[]) => void;\n  onError?: (error: Error) => void;\n}\n\n/**\n * React hook for using the Uploader\n */\nexport function useUploader(options: UseUploaderOptions) {\n  // Create uploader instance\n  const uploaderRef = useRef<Uploader | null>(null);\n\n  // Track upload state\n  const [state, setState] = useState<UseUploaderState>({\n    isUploading: false,\n    progress: {},\n    results: {},\n    errors: {},\n  });\n\n  // Initialize uploader\n  useEffect(() => {\n    // Create the full config with callbacks\n    const config: UploaderConfig = {\n      ...options,\n      onUploadStart: (file) => {\n        const fileId = getFileId(file);\n        setState((prev) => ({\n          ...prev,\n          isUploading: true,\n          progress: {\n            ...prev.progress,\n            [fileId]: { loaded: 0, total: file.size, percentage: 0 },\n          },\n        }));\n      },\n      onUploadProgress: (file, progress) => {\n        const fileId = getFileId(file);\n        setState((prev) => ({\n          ...prev,\n          progress: {\n            ...prev.progress,\n            [fileId]: progress,\n          },\n        }));\n      },\n      onUploadComplete: (file, result) => {\n        const fileId = getFileId(file);\n        setState((prev) => ({\n          ...prev,\n          results: {\n            ...prev.results,\n            [fileId]: result,\n          },\n        }));\n      },\n      onUploadError: (file, error) => {\n        const fileId = getFileId(file);\n        setState((prev) => ({\n          ...prev,\n          errors: {\n            ...prev.errors,\n            [fileId]: error,\n          },\n        }));\n      },\n    };\n\n    // Create the uploader with this config\n    uploaderRef.current = new Uploader(config);\n\n    // Cleanup\n    return () => {\n      uploaderRef.current = null;\n    };\n  }, [options.provider, options.s3, options.filesystem]);\n\n  // Upload files function\n  const uploadFiles = useCallback(\n    async (files: File[], folder?: string) => {\n      if (!uploaderRef.current) {\n        throw new Error(\"Uploader not initialized\");\n      }\n\n      if (files.length === 0) {\n        return [];\n      }\n\n      setState((prev) => ({ ...prev, isUploading: true }));\n\n      try {\n        const results = await uploaderRef.current.uploadFiles(files, folder);\n\n        // Call success callback\n        options.onSuccess?.(results);\n\n        // Update state when complete\n        setState((prev) => ({\n          ...prev,\n          isUploading: false,\n        }));\n\n        return results;\n      } catch (error) {\n        const err = error instanceof Error ? error : new Error(String(error));\n\n        // Call error callback\n        options.onError?.(err);\n\n        setState((prev) => ({\n          ...prev,\n          isUploading: false,\n        }));\n\n        throw err;\n      }\n    },\n    [options.onSuccess, options.onError],\n  );\n\n  // Generate a URL for a file\n  const getFileUrl = useCallback(async (fileKey: string) => {\n    if (!uploaderRef.current) {\n      throw new Error(\"Uploader not initialized\");\n    }\n\n    return uploaderRef.current.getFileUrl(fileKey);\n  }, []);\n\n  // Delete a file\n  const deleteFile = useCallback(async (fileKey: string) => {\n    if (!uploaderRef.current) {\n      throw new Error(\"Uploader not initialized\");\n    }\n\n    return uploaderRef.current.deleteFile(fileKey);\n  }, []);\n\n  // Reset the state\n  const reset = useCallback(() => {\n    setState({\n      isUploading: false,\n      progress: {},\n      results: {},\n      errors: {},\n    });\n  }, []);\n\n  // Helper to get a unique ID for a file\n  const getFileId = (file: File): string => {\n    return `${file.name}-${file.size}-${file.lastModified}`;\n  };\n\n  return {\n    ...state,\n    uploadFiles,\n    getFileUrl,\n    deleteFile,\n    reset,\n    hasErrors: Object.keys(state.errors).length > 0,\n    allFilesComplete:\n      !state.isUploading &&\n      Object.values(state.progress).every((p) => p.percentage === 100),\n  };\n}\n","import React, { useState } from \"react\";\nimport { UploaderConfig, FileMetadata } from \"../core/types\";\nimport { useUploader } from \"../hooks/useUploader\";\nimport { UploadDialog } from \"./UploadDialog\";\n\n// Omit the callbacks from UploaderConfig that are handled internally\ntype UploadButtonProps = Omit<\n  UploaderConfig,\n  \"onUploadStart\" | \"onUploadProgress\" | \"onUploadComplete\" | \"onUploadError\"\n> & {\n  // Button props\n  children?: React.ReactNode;\n  className?: string;\n  buttonText?: string;\n\n  // Upload options\n  multiple?: boolean;\n  accept?: string;\n  folder?: string;\n\n  // Callbacks\n  onSuccess?: (files: FileMetadata[]) => void;\n  onError?: (error: Error) => void;\n\n  // Dialog options\n  showProgressDialog?: boolean;\n  dialogTitle?: string;\n\n  // Custom components\n  renderButton?: (props: {\n    onClick: () => void;\n    isUploading: boolean;\n  }) => React.ReactNode;\n  renderDialog?: (props: {\n    isOpen: boolean;\n    onClose: () => void;\n    progress: number;\n    isComplete: boolean;\n    hasErrors: boolean;\n  }) => React.ReactNode;\n};\n\n/**\n * UploadButton component for file uploads\n */\nexport function UploadButton({\n  // Uploader config\n  provider,\n  s3,\n  filesystem,\n  server,\n  maxFileSize,\n  allowedFileTypes,\n\n  // Button props\n  children,\n  className = \"\",\n  buttonText = \"Upload\",\n\n  // Upload options\n  multiple = false,\n  accept,\n  folder,\n\n  // Callbacks\n  onSuccess,\n  onError,\n\n  // Dialog options\n  showProgressDialog = true,\n  dialogTitle = \"Upload File\",\n\n  // Custom rendering\n  renderButton,\n  renderDialog,\n}: UploadButtonProps) {\n  // Dialog state\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // Setup the uploader hook\n  const uploader = useUploader({\n    provider,\n    s3,\n    filesystem,\n    server,\n    maxFileSize,\n    allowedFileTypes,\n    onSuccess: (files) => {\n      onSuccess?.(files);\n\n      // Auto-close dialog after a brief delay if there are no errors\n      if (!uploader.hasErrors) {\n        setTimeout(() => {\n          setDialogOpen(false);\n          uploader.reset();\n        }, 1000);\n      }\n    },\n    onError: (error) => {\n      onError?.(error);\n    },\n  });\n\n  // Calculate overall progress\n  const calculateOverallProgress = (): number => {\n    const progressValues = Object.values(uploader.progress);\n    if (progressValues.length === 0) return 0;\n\n    const totalLoaded = progressValues.reduce((sum, p) => sum + p.loaded, 0);\n    const totalSize = progressValues.reduce((sum, p) => sum + p.total, 0);\n\n    return Math.round((totalLoaded / totalSize) * 100);\n  };\n\n  // Handle file selection and upload\n  const handleFileUpload = () => {\n    // Create a file input\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.multiple = multiple;\n    if (accept) input.accept = accept;\n\n    // Handle file selection\n    input.onchange = async (e) => {\n      const files = (e.target as HTMLInputElement).files;\n      if (!files || files.length === 0) return;\n\n      // Open progress dialog if enabled\n      if (showProgressDialog) {\n        setDialogOpen(true);\n      }\n\n      try {\n        // Start the upload\n        await uploader.uploadFiles(Array.from(files), folder);\n      } catch (error) {\n        console.error(\"Upload error:\", error);\n      }\n    };\n\n    // Trigger file selection\n    input.click();\n  };\n\n  // Default button rendering\n  const defaultButton = (\n    <button\n      type=\"button\"\n      className={`upload-it-button ${className}`}\n      onClick={handleFileUpload}\n      disabled={uploader.isUploading}\n    >\n      {children || buttonText}\n    </button>\n  );\n\n  // Overall progress for the dialog\n  const overallProgress = calculateOverallProgress();\n  const isComplete = uploader.allFilesComplete && !uploader.isUploading;\n\n  return (\n    <>\n      {/* Render the button */}\n      {renderButton\n        ? renderButton({\n            onClick: handleFileUpload,\n            isUploading: uploader.isUploading,\n          })\n        : defaultButton}\n\n      {/* Render the dialog if enabled */}\n      {showProgressDialog &&\n        (renderDialog ? (\n          renderDialog({\n            isOpen: dialogOpen,\n            onClose: () => setDialogOpen(false),\n            progress: overallProgress,\n            isComplete,\n            hasErrors: uploader.hasErrors,\n          })\n        ) : (\n          <UploadDialog\n            isOpen={dialogOpen}\n            onClose={() => setDialogOpen(false)}\n            progress={overallProgress}\n            isComplete={isComplete}\n            hasErrors={uploader.hasErrors}\n            title={dialogTitle}\n          />\n        ))}\n    </>\n  );\n}\n","import React from \"react\";\n\nexport interface UploadDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  progress: number;\n  isComplete: boolean;\n  hasErrors: boolean;\n  title?: string;\n}\n\n// CSS styles as a JavaScript object\nconst styles = {\n  overlay: {\n    position: \"fixed\" as const,\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    zIndex: 1000,\n  },\n  dialog: {\n    background: \"white\",\n    borderRadius: \"8px\",\n    boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.15)\",\n    width: \"100%\",\n    maxWidth: \"400px\",\n    overflow: \"hidden\",\n  },\n  header: {\n    padding: \"16px\",\n    borderBottom: \"1px solid #eee\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  title: {\n    margin: 0,\n    fontSize: \"18px\",\n    fontWeight: 600,\n  },\n  closeButton: {\n    background: \"none\",\n    border: \"none\",\n    fontSize: \"24px\",\n    cursor: \"pointer\",\n    padding: 0,\n    lineHeight: 1,\n  },\n  content: {\n    padding: \"24px\",\n    display: \"flex\",\n    flexDirection: \"column\" as const,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  icon: {\n    marginBottom: \"16px\",\n  },\n  cloudIcon: {\n    color: \"#3498db\",\n  },\n  successIcon: {\n    color: \"#2ecc71\",\n  },\n  errorIcon: {\n    color: \"#e74c3c\",\n  },\n  progressLabel: {\n    marginBottom: \"8px\",\n    fontSize: \"14px\",\n  },\n  progressContainer: {\n    width: \"100%\",\n    height: \"8px\",\n    backgroundColor: \"#eee\",\n    borderRadius: \"4px\",\n    overflow: \"hidden\",\n  },\n  progressBar: (progress: number) => ({\n    height: \"100%\",\n    backgroundColor: \"#3498db\",\n    borderRadius: \"4px\",\n    transition: \"width 0.3s ease\",\n    width: `${progress}%`,\n  }),\n  status: {\n    fontSize: \"16px\",\n    fontWeight: 500,\n    color: \"#333\",\n  },\n};\n\n/**\n * A simple dialog component to show upload progress\n */\nexport function UploadDialog({\n  isOpen,\n  onClose,\n  progress,\n  isComplete,\n  hasErrors,\n  title = \"Upload File\",\n}: UploadDialogProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div style={styles.overlay} className=\"upload-it-dialog-overlay\">\n      <div style={styles.dialog} className=\"upload-it-dialog\">\n        <div style={styles.header} className=\"upload-it-dialog-header\">\n          <h3 style={styles.title} className=\"upload-it-dialog-title\">\n            {title}\n          </h3>\n          <button\n            type=\"button\"\n            style={styles.closeButton}\n            className=\"upload-it-dialog-close\"\n            onClick={onClose}\n            aria-label=\"Close\"\n          >\n            ×\n          </button>\n        </div>\n\n        <div style={styles.content} className=\"upload-it-dialog-content\">\n          <div style={styles.icon} className=\"upload-it-dialog-icon\">\n            {isComplete ? (\n              hasErrors ? (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 24 24\"\n                  width=\"40\"\n                  height=\"40\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  style={styles.errorIcon}\n                  className=\"upload-it-icon-error\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                  <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n                  <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n                </svg>\n              ) : (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 24 24\"\n                  width=\"40\"\n                  height=\"40\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  style={styles.successIcon}\n                  className=\"upload-it-icon-success\"\n                >\n                  <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n                  <polyline points=\"22 4 12 14.01 9 11.01\" />\n                </svg>\n              )\n            ) : (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                width=\"40\"\n                height=\"40\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                style={styles.cloudIcon}\n                className=\"upload-it-icon-cloud\"\n              >\n                <path d=\"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z\" />\n              </svg>\n            )}\n          </div>\n\n          {!isComplete ? (\n            <>\n              <div\n                style={styles.progressLabel}\n                className=\"upload-it-progress-label\"\n              >\n                Uploading... {progress}%\n              </div>\n              <div\n                style={styles.progressContainer}\n                className=\"upload-it-progress-container\"\n              >\n                <div\n                  style={styles.progressBar(progress)}\n                  className=\"upload-it-progress-bar\"\n                />\n              </div>\n            </>\n          ) : (\n            <div style={styles.status} className=\"upload-it-status\">\n              {hasErrors ? \"Upload completed with errors\" : \"Upload complete!\"}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","// Core exports\nexport { Uploader } from \"./core/uploader\";\nexport type {\n  UploaderConfig,\n  FileMetadata,\n  FileInfo,\n  CompletedFileInfo,\n  UploadProgress,\n  ProviderType,\n  StorageProvider,\n  S3Config,\n  FilesystemConfig,\n  ServerConfig,\n} from \"./core/types\";\n\n// Provider exports\nexport { S3Provider } from \"./providers/s3-provider\";\nexport { FilesystemProvider } from \"./providers/filesystem-provider\";\nexport { createProvider } from \"./providers/provider-factory\";\n\n// Hook exports\nexport { useUploader } from \"./hooks/useUploader\";\n\n// Component exports\nexport { UploadButton } from \"./components/UploadButton\";\nexport { UploadDialog } from \"./components/UploadDialog\";\n\n// Convenience function to create an uploader instance\nimport { Uploader } from \"./core/uploader\";\nimport { UploaderConfig } from \"./core/types\";\n\nexport function createUploader(config: UploaderConfig) {\n  return new Uploader(config);\n}\n"]}